DevLog - Deployment Guide
=======================

This guide will help you deploy your DevLog project to GitHub and set up hosting.

GitHub Setup
-----------
1. Create a new repository on GitHub:
   - Go to github.com
   - Click "New repository"
   - Name it "devlog" or something similar
   - Make it public (looks better on your portfolio!)
   - Don't initialize with README (we already have one)

2. Initialize your local repository:
   ```bash
   cd devlog
   git init
   git add .
   git commit -m "Initial commit: DevLog project setup"
   ```

3. Connect and push to GitHub:
   ```bash
   git remote add origin https://github.com/YOUR_USERNAME/devlog.git
   git branch -M main
   git push -u origin main
   ```

Environment Setup
---------------
1. Create a .gitignore file:
   ```
   # Backend
   __pycache__/
   *.py[cod]
   venv/
   .env
   *.db

   # Frontend
   node_modules/
   dist/
   .env.local
   ```

2. Protect sensitive information:
   - Never commit your .env files
   - Keep your OpenRouter API key private
   - Use environment variables for configuration

Deployment Options
----------------
1. Backend Deployment (Choose one):

   a) Render.com (Free tier available):
      - Create new Web Service
      - Connect your GitHub repo
      - Set build command: `pip install -r requirements.txt`
      - Set start command: `uvicorn main:app --host 0.0.0.0 --port $PORT`
      - Add environment variables (OPENROUTER_API_KEY)

   b) Railway.app:
      - Create new project
      - Connect GitHub repo
      - Set environment variables
      - Deployment will be automatic

   c) Heroku:
      - Create new app
      - Connect GitHub repo
      - Set buildpack to Python
      - Configure environment variables
      - Deploy from GitHub

2. Frontend Deployment (Choose one):

   a) Vercel (Recommended):
      - Sign up with your GitHub account
      - Import your repository
      - Set build command: `npm run build`
      - Set output directory: `dist`
      - Configure environment variables if needed

   b) Netlify:
      - Connect to GitHub
      - Set build command: `npm run build`
      - Set publish directory: `dist`

3. Update API URL:
   - Create .env.production in frontend:
     ```
     VITE_API_URL=https://your-backend-url.com
     ```
   - Update axios baseURL in main.jsx to use this variable

Database Considerations
---------------------
1. For production:
   - Consider migrating to PostgreSQL for better scalability
   - Use a proper database service (e.g., Supabase, Railway)
   - Implement proper backup strategies

2. Keeping SQLite:
   - Ensure your hosting provider persists the database file
   - Implement regular backups
   - Be aware of concurrent access limitations

Security Checklist
----------------
1. Backend:
   - Enable CORS only for your frontend domain
   - Use HTTPS
   - Implement rate limiting
   - Keep dependencies updated

2. Frontend:
   - Sanitize user inputs
   - Use environment variables for sensitive data
   - Keep dependencies updated
   - Implement proper error handling

Monitoring
---------
1. Set up error tracking:
   - Consider using Sentry
   - Monitor API endpoints
   - Track frontend errors

2. Performance monitoring:
   - Use browser dev tools
   - Monitor API response times
   - Check database query performance

Learning Notes
------------
- Deployment is a crucial skill for developers
- Understanding environment variables and security
- Experience with real-world hosting platforms
- Database management in production
- Version control best practices

This deployment setup demonstrates professional practices while
remaining manageable for a portfolio project. The choices made
here reflect common industry practices but are simplified for
learning purposes.

Remember to:
- Keep your dependencies updated
- Monitor your application
- Backup your database regularly
- Follow security best practices
