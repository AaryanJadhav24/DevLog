DevLog - Installation Guide
============================

This guide will help you set up the DevLog project on your local machine.

Prerequisites
------------
- Python 3.8 or higher
- Node.js 14.0 or higher
- npm or yarn
- Git

Backend Setup
------------
1. Create and activate a virtual environment:
   ```
   cd backend
   python -m venv venv
   
   # On Windows
   .\venv\Scripts\activate
   
   # On macOS/Linux
   source venv/bin/activate
   ```

2. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

3. Create a .env file in the backend directory:
   ```
   # backend/.env
   OPENROUTER_API_KEY=your_api_key_here
   ```

4. Start the backend server:
   ```
   uvicorn main:app --reload --port 8000
   ```
   The API will be available at http://localhost:8000

Frontend Setup
-------------
1. Install dependencies:
   ```
   cd frontend
   npm install
   # or
   yarn install
   ```

2. Start the development server:
   ```
   npm run dev
   # or
   yarn dev
   ```
   The frontend will be available at http://localhost:5173

Database Setup
-------------
The SQLite database will be automatically created when you first run the backend.
No additional setup is required.

Troubleshooting
--------------
1. If you get CORS errors:
   - Check that both frontend and backend are running
   - Verify the backend URL in frontend/src/main.jsx
   - Ensure CORS settings in backend/main.py match your frontend URL

2. If the database isn't working:
   - Check file permissions in the backend directory
   - Delete the devlog.db file and restart the backend to recreate it

3. If OpenRouter API calls fail:
   - Verify your API key in the .env file
   - Check your internet connection
   - Ensure you're not exceeding API rate limits

Need Help?
----------
If you run into any issues:
1. Check the console logs in your browser
2. Check the terminal running the backend server
3. Ensure all dependencies are correctly installed
4. Try deleting node_modules and package-lock.json, then run npm install again

Learning Notes
-------------
- The backend uses FastAPI for its simplicity and automatic API documentation
- SQLite is used for easy setup and portability
- The frontend uses Vite for faster development experience
- TailwindCSS provides utility-first styling
- React Router handles client-side routing
- OpenRouter integration adds AI capabilities

This project structure follows modern development practices while remaining
approachable for learning and modification.
